import java.text.SimpleDateFormat
import java.util.Date

// parameters
val arrivalRate = Val[Double]
val rerCapacity = Val[Double]
val rerInterval = Val[Double]
val betaCongestion = Val[Double]
val betaWaiting = Val[Double]

// indicators
val averageTravelTime = Val[Double]
val averageCongestion = Val[Double]
val averageModeShareRer = Val[Double]
val averageModeShareOther = Val[Array[Double]]
val averageCongestionRer = Val[Double]
val averageCongestionOther = Val[Array[Double]]
val averageWaitingUsers = Val[Double]
val totalArrivedUsers = Val[Double]
val totalDivertedUsers = Val[Double]
val totalBoardedUsers = Val[Double]
val shareDivertedUsers = Val[Double]

val id = Val[Int]
val replication = Val[Int]


val cmds = Seq("experiments:setup-experiment ${arrivalRate} ${rerCapacity} ${rerInterval} ${betaCongestion} ${betaWaiting} ${replication}","experiments:run-experiment")

val model = NetLogo6Task(workDirectory / "HEADLESS_ReportMasse.nlogo",cmds,embedWorkspace=true,reuseWorkspace=true) set (
    inputs += (arrivalRate,rerCapacity,rerInterval,betaCongestion,betaWaiting,id,replication),
    outputs += (arrivalRate,rerCapacity,rerInterval,betaCongestion,betaWaiting,id,replication),
    outputs += averageTravelTime mapped "indicators:average-travel-time",
    outputs += averageCongestion mapped "indicators:average-congestion",
    outputs += averageModeShareRer mapped "indicators:average-mode-share-rer",
    outputs += averageModeShareOther mapped "indicators:average-mode-share-other",
    outputs += averageCongestionRer mapped "indicators:average-congestion-rer",
    outputs += averageCongestionOther mapped "indicators:average-congestion-other",
    outputs += averageWaitingUsers mapped "indicators:average-waiting-users",
    outputs += totalArrivedUsers mapped "indicators:total-arrived-users",
    outputs += totalDivertedUsers mapped "indicators:total-diverted-users",
    outputs += totalBoardedUsers mapped "indicators:total-boarded-users",
    outputs += shareDivertedUsers mapped "indicators:share-diverted-users"
)

//val purpose = "TEST"
//val purpose = "GRIDEXPLORATION_GRID"
val purpose = "GRIDEXPLORATION_CLUSTER"

val resfilename = ((new SimpleDateFormat("yyyyMMdd_HHmmss")).format(new Date()))+"_"+purpose+".csv"
val indics_hook = CSVHook(workDirectory / "exploration" / resfilename,arrayOnRow=true)

//val env = EGIEnvironment("vo.complex-systems.eu")
//val env = LocalEnvironment(5)
val env = SGEEnvironment(memory = 2 gigabytes, localSubmission = true, wallTime = 30 minutes, workDirectory = "/home/uceejra/Scratch/.tmp")


val replications = Replication(
   //evaluation = (model on env by 20 hook indics_hook),
   evaluation = (model on env by 10 hook indics_hook),
   seed = replication,
   sample = 10
   //sample = 1
)

val exploration = DirectSampling(
    evaluation = replications,
    sampling =
      /*(LHS(5,
        arrivalRate in Range(10.0,200.0),
        rerCapacity in Range(10.0,2000.0),
        rerInterval in Range(2.0,20.0),
        betaCongestion in Range(-2.0,2.0),
        betaWaiting in Range(-2.0,2.0)
      )*/
      (
	   //(arrivalRate in (100.0 to 200.0 by 100.0))
     (arrivalRate is 100.0)
     x (rerCapacity in Seq(500.0,1000.0))
     x (rerInterval in (3.0 to 5.0 by 1.0))
     x (betaCongestion in (-2.0 to 2.0 by 0.2))
     x (betaWaiting in (-2.0 to 2.0 by 0.2))
     )
    withIndex id )
)


exploration
